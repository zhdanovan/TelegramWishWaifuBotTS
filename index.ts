import { Telegraf, Markup, Context as TelegrafContext, Context } from 'telegraf';

interface Character {
  name: string;
  chance: number;
  rarity: string;
}

interface UserStats {
  userId: number;
  username: string;
  firstName: string;
  pulledCharacters: { [characterName: string]: number }; 
  achievements:string[];
  level: number; 
  experience: number;
  rating : number;
}

interface Achievement {
  id: string;
  name: string;
  description: string;
}

const bot = new Telegraf('');

const characters : Character[] = [
  { name: '–ö–∏ –•—É–Ω', chance: 0.01, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '–°–∞–Ω–≥–≤—É', chance: 0.01, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '457', chance: 0.01, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '–õ–∏ –î–æ–Ω –£–∫', chance: 0.01, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' },
  { name: '–í–∏–∑–∏—Ç–∫–∏–Ω—Å', chance: 0.02, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '–°—ç–±–µ–∫', chance: 0.05, rarity: '‚≠ê‚≠ê‚≠ê' },
  { name: '–ò–Ω–•–æ', chance: 0.05, rarity: '‚≠ê‚≠ê‚≠ê' },
  { name: '101', chance: 0.1, rarity: '‚≠ê‚≠ê' },
  { name: '–¢–∞–Ω–æ—Å', chance: 0.1, rarity: '‚≠ê‚≠ê' },
  { name: '–•–∞–º—Å—Ç–µ—Ä—â–∏–∫', chance: 0.1, rarity: '‚≠ê‚≠ê' },
  { name: '–ê–ª–∏', chance: 0.15, rarity: '‚≠ê' },
  { name: '–†—ã–±–∞–∫', chance: 0.2, rarity: '‚≠ê' },
  // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–∑ Genshin Impact
  { name: '–î–∏–ª—é–∫', chance: 0.01, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '–ê—Ä–ª–µ–∫–∏–Ω–æ', chance: 0.01, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' },
  { name: '–î–∞–π–Ω—Å–ª–µ–π—Ñ', chance: 0.01, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' },
  { name: '–ö—ç –¶–∏–Ω', chance: 0.02, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '–ú–æ–Ω–∞', chance: 0.02, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '–ß–∂—É–Ω –õ–∏', chance: 0.01, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '–í–µ–Ω—Ç–∏', chance: 0.02, rarity: '‚≠ê‚≠ê‚≠ê‚≠ê' }, 
  { name: '–ö–ª–∏', chance: 0.1, rarity: '‚≠ê‚≠ê' },
  { name: '–≠–º–±–µ—Ä', chance: 0.15, rarity: '‚≠ê' },
  { name: '–õ–∏–∑–∞', chance: 0.15, rarity: '‚≠ê' },
  { name: '–ë–∞—Ä–±–∞—Ä–∞', chance: 0.2, rarity: '‚≠ê' },
  { name: '–°—è–Ω –õ–∏–Ω', chance: 0.2, rarity: '‚≠ê' },
];


const userStatsMap: Map<number, UserStats> = new Map();

const achievements : Achievement[] = [
  { id: 'first_wish', name: '–ü–µ—Ä–≤—ã–π Wish', description: '–ü–æ–ª—É—á–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' },
  { id: 'rare_character', name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', description: '–í—ã–±–µ–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–¥–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' },
]


function getRandomCharacter(): Character {
  const random = Math.random();
  let cumulativeChance = 0;

  for (const character of characters) {
      cumulativeChance += character.chance;
      if (random < cumulativeChance) {
          return character;
      }
  }

  return characters[0]; 
}

function updateUserStats(userId: number, username: string, firstName: string, characterName: string): void {
  if (!userStatsMap.has(userId)) {
    userStatsMap.set(userId, {
      userId,
      username,
      firstName,
      pulledCharacters: {},
      achievements: [],
      level: 1, 
      experience: 0,
      rating : 0,
    });
  }

  const userStats = userStatsMap.get(userId)!;
  if (!userStats.pulledCharacters[characterName]) {
    userStats.pulledCharacters[characterName] = 0;
  }
  userStats.pulledCharacters[characterName] += 1;

   userStats.experience += 10; 

  const character = characters.find(c => c.name === characterName);
  if (character && (character.rarity === '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' || character.rarity === '‚≠ê‚≠ê‚≠ê‚≠ê')) {
  userStats.rating += 10; 
  }


   checkLevelUp(userStats);

  checkAchievements(userId, characterName);
}

function checkLevelUp(userStats: UserStats): void {
  const experienceRequired = userStats.level * 100;

  if (userStats.experience >= experienceRequired) {
    userStats.level += 1;
    userStats.experience = 0;

    bot.telegram.sendMessage(
      userStats.userId,
      `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${userStats.level}!`,
      { parse_mode: 'Markdown' }
    ).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è:', error);
    });
  }
}

async function checkAchievements(userId: number, characterName: string): Promise<void> {
  const userStats = userStatsMap.get(userId);
  if (!userStats) return;

  const totalWishes = Object.values(userStats.pulledCharacters).reduce((a, b) => a + b, 0);


  if (totalWishes === 1 && !userStats.achievements.includes('first_wish')) {
    userStats.achievements.push('first_wish');
    try {
      await bot.telegram.sendMessage(
        userId,
        `üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: *${achievements[0].name}*!\n${achievements[0].description}`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }


  const character = characters.find(c => c.name === characterName);
  if (character && (character.rarity === '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' || character.rarity === '‚≠ê‚≠ê‚≠ê‚≠ê') && !userStats.achievements.includes('rare_character')) {
    userStats.achievements.push('rare_character');
    try {
      await bot.telegram.sendMessage(
        userId,
        `üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: *${achievements[1].name}*!\n${achievements[1].description}`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }
}


function getUserStats(userId: number): UserStats | undefined {
  return userStatsMap.get(userId);
}

bot.start((ctx : Context) => {
  try {
  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å wish!`;
  ctx.reply(welcomeMessage, Markup.keyboard([
    ['üé≤ –°–¥–µ–ª–∞—Ç—å wish', 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
  ]).resize());
}
catch(error){
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
}
}); 

bot.hears('üé≤ –°–¥–µ–ª–∞—Ç—å wish', (ctx) => {
  if (ctx.from.is_bot) {
      return ctx.reply('–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
  }

  const username = ctx.from.username || ctx.from.first_name;
  const character = getRandomCharacter();
  const userId = ctx.from.id;
  const firstName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  updateUserStats(userId, username, firstName, character.name);

  let message = `üé≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –≤—ã–±–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: `;
  if (character.rarity === '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' || character.rarity === '‚≠ê‚≠ê‚≠ê‚≠ê') {
      message += `**${character.name}** ${character.rarity} üéâ`;
  } else {
      message += `${character.name} ${character.rarity}`;
  }

  ctx.replyWithMarkdownV2(message);
});

bot.hears('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx: Context) => {
  if (ctx.from?.is_bot) {
      return ctx.reply('–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
  }
  if (!ctx.from) {
    return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
  }
  const userId = ctx.from.id;
  const userStats = getUserStats(userId);

  if (!userStats) {
    return ctx.reply('–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ wish.');
  }

  let message = `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n`;
  message += `üéöÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${userStats.level}\n`;
  message += `üìà –û–ø—ã—Ç: ${userStats.experience}/${userStats.level * 100}\n\n`;
  message += `üèÖ –†–µ–π—Ç–∏–Ω–≥: ${userStats.rating} –æ—á–∫–æ–≤\n\n`;

  for (const [characterName, count] of Object.entries(userStats.pulledCharacters)) {
    message += `- ${characterName}: ${count} —Ä–∞–∑\n`;
  }

  const notPulledCharacters = characters.filter(character => !userStats.pulledCharacters[character.name]);
  if (notPulledCharacters.length > 0) {
    message += `\nüö´ –ù–µ –≤—ã–±–∏—Ç—ã:\n`;
    notPulledCharacters.forEach(character => {
      message += `- ${character.name}\n`;
    });
  }

   if (userStats.achievements.length > 0) {
    message += `\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n`;
    userStats.achievements.forEach(achievementId => {
      const achievement = achievements.find(a => a.id === achievementId);
      if (achievement) {
        message += `- ${achievement.name}: ${achievement.description}\n`;
      }
    });
  } else {
    message += `\nüèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n`;
  }

  ctx.reply(message);
});


bot.launch();

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');