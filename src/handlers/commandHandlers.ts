import { Context } from 'telegraf';
import { Markup } from 'telegraf';
import { UserStatsService } from '../services/userStatsService';
import { GameService } from '../services/gameService';
import { characters } from '../data/gameData';

export class CommandHandlers {
  constructor(
    private userStatsService: UserStatsService,
    private gameService: GameService
  ) {}

  public async handleStart(ctx: Context): Promise<void> {
    try {
      const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å wish!`;
      await ctx.reply(welcomeMessage, Markup.keyboard([
        ['üé≤ –°–¥–µ–ª–∞—Ç—å wish', 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π']
      ]).resize());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  public async handleWish(ctx: Context): Promise<void> {
    if (ctx.from?.is_bot) {
      return ctx.reply('–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    }

    const username = ctx.from?.username || ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const character = this.gameService.getRandomCharacter();
    const userId = ctx.from?.id;
    const firstName = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    if (userId) {
      this.userStatsService.updateUserStats(userId, username, firstName, character.name);
    }

    let message = `üé≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –≤—ã–±–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: `;
    if (character.rarity === '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' || character.rarity === '‚≠ê‚≠ê‚≠ê‚≠ê') {
      message += `**${character.name}** ${character.rarity} üéâ`;
    } else {
      message += `${character.name} ${character.rarity}`;
    }

    await ctx.replyWithMarkdownV2(message);
  }

  public async handleStats(ctx: Context): Promise<void> {
    if (ctx.from?.is_bot) {
      return ctx.reply('–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    }
    if (!ctx.from) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
    }

    const userId = ctx.from.id;
    const userStats = this.userStatsService.getUserStats(userId);

    if (!userStats) {
      return ctx.reply('–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ wish.');
    }

    let message = `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n`;
    message += `üéöÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${userStats.level}\n`;
    message += `üìà –û–ø—ã—Ç: ${userStats.experience}/${userStats.level * 100}\n\n`;
    message += `üèÖ –†–µ–π—Ç–∏–Ω–≥: ${userStats.rating} –æ—á–∫–æ–≤\n\n`;

    for (const [characterName, count] of Object.entries(userStats.pulledCharacters)) {
      message += `- ${characterName}: ${count} —Ä–∞–∑\n`;
    }

    const notPulledCharacters = characters.filter(character => !userStats.pulledCharacters[character.name]);
    if (notPulledCharacters.length > 0) {
      message += `\nüö´ –ù–µ –≤—ã–±–∏—Ç—ã:\n`;
      notPulledCharacters.forEach(character => {
        message += `- ${character.name}\n`;
      });
    }

    if (userStats.achievements.length > 0) {
      message += `\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n`;
      userStats.achievements.forEach(achievementId => {
        const achievement = achievements.find(a => a.id === achievementId);
        if (achievement) {
          message += `- ${achievement.name}: ${achievement.description}\n`;
        }
      });
    } else {
      message += `\nüèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n`;
    }

    await ctx.reply(message);
  }

  public async handleTopUsers(ctx: Context): Promise<void> {
    if (ctx.from?.is_bot) {
      return ctx.reply('–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    }

    const topUsers = this.userStatsService.getTopUsers();

    let message = 'üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
    topUsers.forEach((user, index) => {
      message += `${index + 1}. @${user.username} - ${user.rating} –æ—á–∫–æ–≤ (–£—Ä–æ–≤–µ–Ω—å ${user.level})\n`;
    });

    if (topUsers.length === 0) {
      message = '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤ —Ç–æ–ø–µ. –°–¥–µ–ª–∞–π—Ç–µ wish, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!';
    }

    await ctx.reply(message);
  }
} 